-.bin: .java 
-.src: .class


-.서버에서 끌고 오는 방법
1. clone ( 최초 1회 실행 )
2. fetch
3. pull
-.서버에 밀어 넣기
1. 변경점(수정, 삭제, 추가 포함) 자동 확인(인덱싱 : 변경사항 자동 체크)
2. unstage -> stage 상태로 기록할 대상 선정
3. commit
------------- 우리 컴퓨터 저장소에서 기록(history)을 남기는 것 -------------
4. push


리터럴: \r, \n (제한문자)


-.기본자료형: 소문자로 시작 (int, char, boolean...)
-.참조자료형: 대문자로 시작 (String, Class...)  ***주소값 저장!!!***

-.String = 4Byte (=int)
String을 재선언 시 새로운 (스택)주소값을 가지고 (힙)새로운 값을 저장함
기존의 값은 가비지컬렉터(GC)가 지워줌
ex)
String name = "이종석" 101번지 주소 가지고 있음
name = "박은진" 10030번지 주소로 새로 바뀜
101번지 주소는 GC가 지워줌

-.&& vs &, || vs |
&&연산자는 선피연산자가 false라면 무조건 false이기 때문에 후피연산자를 진행하지 않음
||연산자는 선피연산자가 true라면 무조건 true이기 때문에 후피연산자를 진행하지 않음
day04프로젝트의 calExample2클래스 32라인 이하 참고

-.비트연산: 2진수 연산
-.비트 쉬프트 연산
int x1 = 3  ( 0000 0011 )
x1 << 3 ( 왼쪽으로 3칸 이동)  왼쪽을 0으로 채움
   >> 오른쪽으로 이동 시에는 부호비트와 같은 비트로 채워줌
System.out.println(x1) ( 0000 1100 )

-.삼항연산자
(조건식) ? (true) : (false)

-.switch 문 조건에 들어갈 수 있는 것:byte, short, int, char, String, Enum(열거형)

-.break: 반복문을 끝내겠따!
-.continue: 이번 Roof를 끝내겠따!

-.System.out.println(Array.toString(변수명));
Array.toString() 배열 전체를 보여줌!

-.얕은 복사: 같은 주소를 참조한다 ( 연동 O )
-.깊은 복사: 같은 주소를 참조하지 않는다 ( 연동 X )
-.bb = aa.clone(); (clone 메소드는 깊은 복사)

-.return값이 있으면 받아주기! ( String name = returnName(); )
-.매개변수가 여러 개 일때 ( 몇 개가 들어올지 모를 때 )	Day08/Method2.class
	1. 배열
	2. int ... x  <-- ...이 중요!  ( 가변인자 : 인자의 수를 제한하지 않는다 ) // 가변인자를 마지막으로 받는 것만 가능! (int ... x, String name) = > 안됨 ( String name, int ... x ) => 가능
		ex) void add3 (int ...x) {
		    int sum = 0;
		    	for (int i = 0; i<x.length; i++) {
		    		sum += x[i];	// 사실 어쨌든 배열임
		        }
		    }

		### 실행 메소드 ###
		add3(1,2,3,4,5,6,7,8,9) // 배열이 아닌 int 와 ,로 넘김

-. 클래스(Model Spec) = 필드(=속성) + 생성자(혹은 생성자메서드) + 메서드(=행위/기능)
-. instance화 : 클래스를 new를 이용해 사용할 수 있도록 선언하는 것

-.접근제한자
private   : 동일클래스
defalut   : 동일클래스 + 동일패키지
protected : 동일클래스 + 동일패키지 + 상속
public    : 동일클래스 + 동일패키지 + 상속 + 모든클래스
-.생성자
생성자 오버라이딩으로 새로운 생성자를 만들면 기존 생성자는 없어짐

Day11
-. 오버로딩 (기능중첩): 매개변수의 1.자료형, 2.개수, 3.순서 중 하나 이상 달라야해!
순서는 서로 다른 데이터 형식의 매개변수 2개이상의 순서에 따름
public Student(String stdName, int stdGrade)
public Student(int stdGrade, String stdName)
위에 2개는 순서가 바뀌었기에 오버로딩으로 인정
-. this
this는 나 자신을 가리키는데
this.name <- 내 클래스의 멤버변수 String name;를 가르킴
public Student(int grade, String name) {
		this.name = name;
		this.grade = grade;
}
this는 멤버변수와 매개변수를 구분 시 사용

-.singleton
static을 이용한 객체 공유
day11.SinglePattern, day11.STest
static인데 new로 heap영역도 쓰기

Day12
-. this나 super로 static 불러올 수 없음 (class명.변수/메서드명)으로 호출 가능
-. 상속 시 기본적으로 자식클래스에서 메서드나 변수를 가져오며 super를 사용하여 부모클래스에 접근 가능
################################################################################
			Overloading vs Overriding
Overloading (메서드의 중첩정의) ex : system.out.println( 뭐가 들어올지 모름 )
1. 메서드 이름이 같다
2. 인자의 숫자나, 인자의 데이터타입, 순서가 다른 메서드의 중첩 (인자는 무조건 달라야함)
3. 상속관계가 아니어도 가능

Overriding (메서드의 재정의) ex : 그래픽카드 출력 기능만 가능한 메소드 -> 자식에서 게임3d가속 추가된 메소드
1. 메서드 이름이 같다.
2. 인자, 리턴타입 등이 모두 같아야 한다. (선언부 동일해야함, 리턴타입, 메소드명, 인자 모두 동일)
3. 상속관계에서만 사용 가능
4. 하나의 부모 메서드 당 하나의 오버라이드 된 메서드만 존재 ( 1:1관계 )
5. 자식의 접근제어자는 부모의 접근제어자 보다 같거나 그 이상 이어야 한다.
#################################################################################
-. 다형성: 특정 그래픽종류만 받는 것이 아니라 모든 그래픽카드를 받을 수 있도록 하는 것 (범용성)
인자를 VideoCard로 받으면서 Geforce와 Radeon을 모두 인자로 받을 수 있음
***** 하위클래스 객체를 상위 클래스 자료형으로 변환이 가능하다 = 범용성

Day14
-. class
-> 모두 구현된 객체 => new 객체 생성

-. 추상클래스 [상속(extend) -> 단일상속]
-> 일부가 정의되지 않는 클래스 (최소 한개 이상의 '추상'메서드 필수) => new 객체 생성 X
*추상메서드 -> 구현 X 이름만 정의   /  재정의 필요

-. 인터페이스 [구현(implements) -> 다중상속]
-> 모두 구현X, 추상 method의 집합 = 소통규약(규칙) => new 객체 생성 X

-. 인터페이스는 누구나 사용 가능한 '통신규약'이므로 public
-. 인터페이스를 상속받았으면 인터페이스의 메소드를 '반드시' '강제적' 구현

-. 인터페이스 내 default method는 구현체가 있으며 하위 클래스에서 바로 메소드를 구현하지 않아도 되도록 해줌
-. 상속한 2개 이상의 인터페이스의 default method의 명칭이 동일할 땐
1. 새롭게 재정의를 해주거나
2. intA.super.methodname을 선택해줘야함 (intA인지 intB인지)

-. instanceof	( 보통 형변환을 할 수 있는지 없는지 확인할 때 많이 사용 )
	if(pp2 instanceof Paymethod) {
		System.out.println("pp2는 Paymethod의 자식이거나/본체");
	}

Day15
-. throws : 메서드에 "선언" / ex: int divide(int x, int y) throws ArithmeticException, Exception { 
-. throw : 메서드 내에서 실제 Exception 객체럴 생성해서 전달하여 처리 / ex : if (y == 0) throw new ArithmeticException("못 나눠 0으론");

-.// String interpolation (치환, 중간에 값 넣기)
	String val = "안녕하세요, 내 이름은 %s 입니다. 나이는 %d 살이에요";
	val = String.format(val, "이종석", 10);
	System.out.println(val);
// ==> 안녕하세요, 내 이름은 이종석 입니다. 나이는 10 살이에요

Day16
-. equals(), hashCode() 비교 메서드
-. clone() --> 사용하고 싶으면 @Override하고 구현부에는 return super.clone() 하면 됨,
	       깊은 복사: 주소 공유 X,
	       implements Cloneable 구현 후 사용 가능

-. 객체 생성없이 reflection으로 생성자, 메소드 호출하는 방법
RefEx.class, User.class 확인

-. Wrapper 사용하는 이유는 : 사용할 수 있는 메소드가 많아지고 collection에서 객체만 받아서

-. List : 중복X, 순서유지보장 (index 존재)
-. Set : 중복O, 순서유지미보장(index 안따짐)
-. Map : (key:value)


-. ArrayList : 배열과 유사하여 방을추가하고 옮기고 값을 추가하므로 느리지만 순회는 빠름
-. LinkedList : 앞 뒤 주소 참조함으로 값 추가 시 방추가와 주소만 바꾸면 되서 빠르고 유연성을 가짐


Day17
-. Iterator : 커서개념이 존재 (잘 사용 X)    // hasNext()
-. Enumeration : 커서개념이 존재 (잘 사용 X) // hasMoreElement()

-. 제네릭
- List<Object> b = new List<Integer<(); 불가능함
- Object > Integer지만 제네릭은 안됨!
-  //static int add(List<? super Number> list) {   ==> super : List는 Number의 부모클래스만 받겠다	
     static int add(List<? extends Number> list) {	// ==> extends : List는 Number의 자식 클래스만 받겠다













